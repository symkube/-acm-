什么是__gnu_pbds?Policy based data structures！简称平板电视pbds。在使用pbds前，你需要：

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>//用tree
#include<ext/pb_ds/hash_policy.hpp>//用hash
#include<ext/pb_ds/trie_policy.hpp>//用trie
#include<ext/pb_ds/priority_queue.hpp>//用priority_queue
using namespace __gnu_pbds;

woc，真jb烦，有没有什么简单的方法？当然有：

#include<bits/extc++.h>
using namespace __gnu_pbds;
//bits/extc++.h与bits/stdc++.h类似，bits/extc++.h是所有拓展库，bits/stdc++.h是所有标准库

但是在dev c++里如果这样写，会提示少一个文件，出各种莫名奇妙的锅，其它的IDE请自行尝试，我的linux是deepin的，装了NOI Linux的dalao帮忙测一下。


《hash表》

hash_table的用法与map类似，它是这么定义的：

cc_hash_table<int,bool> h;
gp_hash_table<int,bool> h;

其中cc开头为拉链法，gp开头为探测法，个人实测探测法稍微快一些。

啥？操作？其实就和map差不多，支持[ ]和find。

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/hash_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
gp_hash_table<string,int> h;
void judge(string s)
{
    if(h.find(s)!=h.end())
        cout<<"orz %%%";
    else
        cout<<"tan90";
    cout<<endl;
}
int main()
{
    h["Ican'tAKIOI"]=1;
    h.insert(make_pair("UAKIOI",1));
    string str;
    while(cin>>str)
        judge(str);
    return 0;
}


《可并堆》
#include <bits/stdc++.h>
#include <ext/pb_ds/priority_queue.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef __gnu_pbds::priority_queue <pair<int, int>, greater<pair<int, int> >, pairing_heap_tag> heap;
heap q;
提供以下函数：：

priority_queue()默认构造函数
priority_queue(const priority_queue &other) 用另一个优先队列来构造
size()用法同std
empty()用法同std
push(const_reference r_val)注意push返回point_iterator
top()没区别…
pop()没什么好说的
point_iterator对应某元素的迭代器
erase(point_iterator it)删除对应点
modify(point_iterator it,const_reference r_new_val)修改对应点的值(这是优化dijkstra神方法,均摊复杂度O(1))
clear()基本没什么用,还不如重新定义一个…
join(priority_queue &other)神方法*2,白送可并堆啊,还是O(1)的,注意合并后other会被清空
split(Pred prd,priority_queue &other)拆分,但好像没什么用
其他迭代器同std

《例题》：
#include<cstdio>
#define N 100005
#include<algorithm>
#define For(i,j,k) for(int i=j;i<=k;i++)
#include<ext/pb_ds/priority_queue.hpp> //头文件
using namespace std;
using namespace __gnu_pbds; //开pbds库
__gnu_pbds::priority_queue<int> h[N]; //声明，默认大根堆配对堆
int fa[N];
int find(int x){
    if (fa[x]==x) return x;
    fa[x]=find(fa[x]); return fa[x]; //这几行是并查集，标记每个猴子属于哪个堆
}
int main(){
    int n,m,k,k0,fx,fy,x,y;
    while(scanf("%d",&n)!=EOF){
        For(i,1,n) h[i].push(read()),fa[i]=i; //刚开始一个猴子一个堆
        m=read();
        For(i,1,m){
            x=read(),y=read();
            fx=find(x); fy=find(y); //并查集寻找2个猴子属于哪个堆
            if (fx==fy) printf("-1\n"); //属于同一个堆输出-1
            else{
                k=h[fx].top(); h[fx].pop(); k=k/2; h[fx].push(k);
                k=h[fy].top(); h[fy].pop(); k=k/2; h[fy].push(k); //两个堆根节点也就是最大的减半
                fa[fx]=fy; h[fy].join(h[fx]); //合并2个堆，一个join就行了，是不是很简单~
                printf("%d\n",h[fy].top()); //输出合并后的堆顶
            }
        }
        For(i,1,n) h[i].clear(); //多组数据，处理完一组要清空
    }
    return 0;
}
