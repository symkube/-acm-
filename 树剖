第一步
首先要对整棵树dfs一遍，找出每个节点的重儿子
顺便处理出每个节点的深度，以及他们的父亲节点
int dfs1(int now, int f, int dep) {
    deep[now] = dep;
    fa[now] = f;
    tot[now] = 1;
    int maxson = -1;
    for (int i = head[now]; i != -1; i = edge[i].nxt) {
        if (edge[i].v == f) continue;
        tot[now] += dfs1(edge[i].v, now, dep + 1);
        if (tot[edge[i].v] > maxson) maxson = tot[edge[i].v], son[now] = edge[i].v;
    }
    return tot[now];
}
然后我们需要对整棵树进行重新编号
我把一开始的每个节点的权值存在了b

void dfs2(int now, int topf) {
    idx[now] = ++cnt;
    a[cnt] = b[now];
    top[now] = topf;
    if (!son[now]) return ;
    dfs2(son[now], topf);
    for (int i = head[now]; i != -1; i = edge[i].nxt)
        if (!idx[edge[i].v])
            dfs2(edge[i].v, edge[i].v);
}
idx表示重新编号后该节点的编号是多少
另外，这里引入了一个top数组，top[i]表示i号节点所在重链的头节点(最顶上的节点)

第三步
我们需要根据重新编完号的树，把这棵树的上每个点映射到线段树上，
struct Tree {
    int l, r, w, siz, f;
} T[MAXN];
void Build(int k, int ll, int rr) {
    T[k].l = ll; T[k].r = rr; T[k].siz = rr - ll + 1;
    if (ll == rr) {
        T[k].w = a[ll];
        return ;
    }
    int mid = (ll + rr) >> 1;
    Build(ls, ll, mid);
    Build(rs, mid + 1, rr);
    update(k);
}



void update(int k) { //更新
    T[k].w = (T[ls].w + T[rs].w + MOD) % MOD;
}

void IntervalAdd(int k, int ll, int rr, int val) { //区间加
    if (ll <= T[k].l && T[k].r <= rr) {
        T[k].w += T[k].siz * val;
        T[k].f += val;
        return ;
    }
    pushdown(k);
    int mid = (T[k].l + T[k].r) >> 1;
    if (ll <= mid)    IntervalAdd(ls, ll, rr, val);
    if (rr > mid)    IntervalAdd(rs, ll, rr, val);
    update(k);
}
int IntervalSum(int k, int ll, int rr) { //区间求和
    int ans = 0;
    if (ll <= T[k].l && T[k].r <= rr)
        return T[k].w;
    pushdown(k);
    int mid = (T[k].l + T[k].r) >> 1;
    if (ll <= mid) ans = (ans + IntervalSum(ls, ll, rr)) % MOD;
    if (rr > mid)  ans = (ans + IntervalSum(rs, ll, rr)) % MOD;
    return ans;
}
void pushdown(int k) { //下传标记
    if (!T[k].f) return ;
    T[ls].w = (T[ls].w + T[ls].siz * T[k].f) % MOD;
    T[rs].w = (T[rs].w + T[rs].siz * T[k].f) % MOD;
    T[ls].f = (T[ls].f + T[k].f) % MOD;
    T[rs].f = (T[rs].f + T[k].f) % MOD;
    T[k].f = 0;
}

第四步

我们考虑如何实现对于树上的操作
树链剖分的思想是:对于两个不在同一重链内的节点,让他们不断地跳,使得他们处于同一重链上，那么如何"跳”呢？
还记得我们在第二次dfs中记录的top数组么？
有一个显然的结论：x到top[x]中的节点在线段树上是连续的，
结合deep数组，假设两个节点为x,y
我们每次让deep[top[x]]与deep[top[y]]中大的(在下面的)往上跳(有点类似于树上倍增)
让x节点直接跳到top[x],然后在线段树上更新
最后两个节点一定是处于同一条重链的，前面我们提到过重链上的节点都是连续的，直接在线段树上进行一次查询就好

void TreeSum(int x, int y) { //x与y路径上的和
    int ans = 0;
    while (top[x] != top[y]) {
        if (deep[top[x]] < deep[top[y]]) swap(x, y);
        ans = (ans + IntervalSum(1, idx[ top[x] ], idx[x])) % MOD;
        x = fa[ top[x] ];
    }
    if (deep[x] > deep[y]) swap(x, y);
    ans = (ans + IntervalSum(1, idx[x], idx[y])) % MOD;
    printf("%d\n", ans);
}
void TreeAdd(int x, int y, int val) { //对于x,y路径上的点加val的权值
    while (top[x] != top[y]) {
        if (deep[top[x]] < deep[top[y]]) swap(x, y);
        IntervalAdd(1, idx[ top[x] ], idx[x], val);
        x = fa[ top[x] ];
    }
    if (deep[x] > deep[y])    swap(x, y);
    IntervalAdd(1, idx[x], idx[y], val);
}

对于子树的操作
这个就更简单了
因为一棵树的子树在线段树上是连续的
所以修改的时候直接这样
IntervalAdd(1,idx[x],idx[x]+tot[x]-1,z%MOD);

